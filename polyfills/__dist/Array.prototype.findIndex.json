{"aliases":["es6","modernizr:es6array"],"browsers":{"bb":"6 - 10","chrome":"<=45","firefox":"3.6 - 24","ie":"*","ie_mob":"10 - *","opera":"*","safari":"* - 7.0","firefox_mob":"3.6 - 24"},"dependencies":["Object.defineProperty"],"spec":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.findIndex","docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex","baseDir":"Array/prototype/findIndex","hasTests":true,"rawSource":"\n// Array.prototype.findIndex\nObject.defineProperty(Array.prototype, 'findIndex', {\n\tconfigurable: true,\n\tvalue: function findIndex(callback) {\n\t\tif (this === undefined || this === null) {\n\t\t\tthrow new TypeError(this + 'is not an object');\n\t\t}\n\n\t\tif (!(callback instanceof Function)) {\n\t\t\tthrow new TypeError(callback + ' is not a function');\n\t\t}\n\n\t\tvar\n\t\tobject = Object(this),\n\t\tscope = arguments[1],\n\t\tarraylike = object instanceof String ? object.split('') : object,\n\t\tlength = Math.max(Math.min(arraylike.length, 9007199254740991), 0) || 0,\n\t\tindex = -1;\n\n\t\twhile (++index < length) {\n\t\t\tif (index in arraylike) {\n\t\t\t\tif (callback.call(scope, arraylike[index], index, object)) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\twritable: true\n});\n","minSource":"Object.defineProperty(Array.prototype,\"findIndex\",{configurable:!0,value:function(t){if(void 0===this||null===this)throw new TypeError(this+\"is not an object\");if(!(t instanceof Function))throw new TypeError(t+\" is not a function\");for(var n=Object(this),i=arguments[1],r=n instanceof String?n.split(\"\"):n,e=Math.max(Math.min(r.length,9007199254740991),0)||0,o=-1;++o<e;)if(o in r&&t.call(i,r[o],o,n))return o;return-1},writable:!0});","detectSource":"'findIndex' in Array.prototype"}