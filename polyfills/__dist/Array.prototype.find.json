{"aliases":["es6","modernizr:es6array"],"browsers":{"bb":"*","chrome":"<=44","firefox":"3.6 - 24","ie":"*","ie_mob":"10 - *","opera":"*","safari":"* - 7.0","firefox_mob":"3.6 - 24"},"dependencies":["Object.defineProperty"],"spec":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.find","docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find","baseDir":"Array/prototype/find","hasTests":true,"rawSource":"\n// Array.prototype.find\nObject.defineProperty(Array.prototype, 'find', {\n\tconfigurable: true,\n\tvalue: function find(callback) {\n\t\tif (this === undefined || this === null) {\n\t\t\tthrow new TypeError(this + 'is not an object');\n\t\t}\n\n\t\tif (!(callback instanceof Function)) {\n\t\t\tthrow new TypeError(callback + ' is not a function');\n\t\t}\n\n\t\tvar\n\t\tobject = Object(this),\n\t\tscope = arguments[1],\n\t\tarraylike = object instanceof String ? object.split('') : object,\n\t\tlength = Math.max(Math.min(arraylike.length, 9007199254740991), 0) || 0,\n\t\tindex = -1,\n\t\telement;\n\n\t\twhile (++index < length) {\n\t\t\tif (index in arraylike) {\n\t\t\t\telement = arraylike[index];\n\n\t\t\t\tif (callback.call(scope, element, index, object)) {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\twritable: true\n});\n","minSource":"Object.defineProperty(Array.prototype,\"find\",{configurable:!0,value:function(t){if(void 0===this||null===this)throw new TypeError(this+\"is not an object\");if(!(t instanceof Function))throw new TypeError(t+\" is not a function\");for(var n,i=Object(this),r=arguments[1],e=i instanceof String?i.split(\"\"):i,o=Math.max(Math.min(e.length,9007199254740991),0)||0,a=-1;++a<o;)if(a in e&&(n=e[a],t.call(r,n,a,i)))return n},writable:!0});","detectSource":"'find' in Array.prototype"}