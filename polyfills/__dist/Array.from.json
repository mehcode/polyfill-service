{"aliases":["es6","modernizr:es6array"],"browsers":{"chrome":"<45","firefox":"4 - 31","ie":"6 - *","ie_mob":"10 - *","opera":"*","safari":"7 - *","firefox_mob":"4 - *"},"dependencies":["Object.defineProperty"],"spec":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from","docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from","baseDir":"Array/from","hasTests":true,"rawSource":"\n// Array.from\nObject.defineProperty(Array, 'from', {\n\tconfigurable: true,\n\tvalue: function from(source) {\n\t\t// handle non-objects\n\t\tif (source === undefined || source === null) {\n\t\t\tthrow new TypeError(source + ' is not an object');\n\t\t}\n\n\t\t// handle maps that are not functions\n\t\tif (1 in arguments && !(arguments[1] instanceof Function)) {\n\t\t\tthrow new TypeError(arguments[1] + ' is not a function');\n\t\t}\n\n\t\tvar\n\t\tarraylike = typeof source === 'string' ? source.split('') : Object(source),\n\t\tmap = arguments[1],\n\t\tscope = arguments[2],\n\t\tarray = [],\n\t\tindex = -1,\n\t\tlength = Math.min(Math.max(Number(arraylike.length) || 0, 0), 9007199254740991),\n\t\tvalue;\n\n\t\twhile (++index < length) {\n\t\t\tif (index in arraylike) {\n\t\t\t\tvalue = arraylike[index];\n\n\t\t\t\tarray[index] = map ? map.call(scope, value, index) : value;\n\t\t\t}\n\t\t}\n\n\t\tarray.length = length;\n\n\t\treturn array;\n\t},\n\twritable: true\n});\n","minSource":"Object.defineProperty(Array,\"from\",{configurable:!0,value:function(n){if(void 0===n||null===n)throw new TypeError(n+\" is not an object\");if(1 in arguments&&!(arguments[1]instanceof Function))throw new TypeError(arguments[1]+\" is not a function\");for(var r,t=\"string\"==typeof n?n.split(\"\"):Object(n),e=arguments[1],a=arguments[2],i=[],o=-1,u=Math.min(Math.max(Number(t.length)||0,0),9007199254740991);++o<u;)o in t&&(r=t[o],i[o]=e?e.call(a,r,o):r);return i.length=u,i},writable:!0});","detectSource":"'from' in Array && (function () {\n\ttry {\n\t\tArray.from({ length: -Infinity });\n\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n})()"}